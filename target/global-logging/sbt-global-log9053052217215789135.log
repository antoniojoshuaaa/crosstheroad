[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\joshi\AppData\Local\Temp\idea.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\joshi\AppData\Local\Temp\idea.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.9.3 (Amazon.com Inc. Java 1.8.0_372)
[debug]       Load.loadUnit: plugins took 142.7964ms
[debug]       Load.loadUnit: defsScala took 0.4929ms
[debug] [Loading] Scanning directory C:\Users\joshi\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\joshi\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 28.9221 ms
[debug]           Load.resolveProject(global-plugins) took 84.2329ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\joshi\.sbt\1.0\plugins, plugins: List(<none>))) took 162.2686ms
[debug] [Loading] Done in C:\Users\joshi\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 203.199ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.4707ms
[debug]     Load.loadUnit(file:/C:/Users/joshi/.sbt/1.0/plugins/, ...) took 358.1361ms
[debug]   Load.apply: load took 812.5381ms
[debug]   Load.apply: resolveProjects took 10.9035ms
[debug]   Load.apply: finalTransforms took 93.3702ms
[debug]   Load.apply: config.delegates took 11.6877ms
[debug]   Load.apply: Def.make(settings)... took 575.5642ms
[debug]   Load.apply: structureIndex took 161.0107ms
[debug]   Load.apply: mkStreams took 2.6012ms
[info] loading global plugins from C:\Users\joshi\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 4593.48ms
[debug]           Load.loadUnit: plugins took 34.4423ms
[debug]           Load.loadUnit: defsScala took 0.0038ms
[debug] [Loading] Scanning directory C:\Users\joshi\Documents\Josh\Uni\Sem 6\OOP\crosstheroad\project
[debug]             Load.loadUnit: mkEval took 10.034ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\joshi\Documents\Josh\Uni\Sem 6\OOP\crosstheroad\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 1.4763 ms
[info] loading settings for project crosstheroad-build from idea.sbt ...
[debug]               Load.resolveProject(crosstheroad-build) took 2.9758ms
[debug]             Load.loadTransitive: finalizeProject(Project(id crosstheroad-build, base: C:\Users\joshi\Documents\Josh\Uni\Sem 6\OOP\crosstheroad\project, plugins: List(<none>))) took 4.905ms
[debug] [Loading] Done in C:\Users\joshi\Documents\Josh\Uni\Sem 6\OOP\crosstheroad\project, returning: (crosstheroad-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 2918.4165ms
[debug]           Load.loadUnit: cleanEvalClasses took 5.632ms
[debug]         Load.loadUnit(file:/C:/Users/joshi/Documents/Josh/Uni/Sem%206/OOP/crosstheroad/project/, ...) took 2959.6353ms
[debug]       Load.apply: load took 2961.565ms
[debug]       Load.apply: resolveProjects took 0.1592ms
[debug]       Load.apply: finalTransforms took 12.5742ms
[debug]       Load.apply: config.delegates took 0.5082ms
[debug]       Load.apply: Def.make(settings)... took 261.3548ms
[debug]       Load.apply: structureIndex took 35.1499ms
[debug]       Load.apply: mkStreams took 0.003ms
[info] loading project definition from C:\Users\joshi\Documents\Josh\Uni\Sem 6\OOP\crosstheroad\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[debug]     Load.loadUnit: plugins took 5929.8815ms
[debug]     Load.loadUnit: defsScala took 0.0024ms
[debug] [Loading] Scanning directory C:\Users\joshi\Documents\Josh\Uni\Sem 6\OOP\crosstheroad
[debug]       Load.loadUnit: mkEval took 0.3104ms
[debug] [Loading] Found root project root w/ remaining 
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 6.0217 ms
[info] loading settings for project root from build.sbt ...
[debug]         Load.resolveProject(root) took 132.2105ms
[debug]       Load.loadTransitive: finalizeProject(Project(id root, base: C:\Users\joshi\Documents\Josh\Uni\Sem 6\OOP\crosstheroad, plugins: List(<none>))) took 141.0289ms
[debug] [Loading] Done in C:\Users\joshi\Documents\Josh\Uni\Sem 6\OOP\crosstheroad, returning: (root)
[debug]     Load.loadUnit: loadedProjectsRaw took 2869.021ms
[debug]     Load.loadUnit: cleanEvalClasses took 12.4861ms
[debug]   Load.loadUnit(file:/C:/Users/joshi/Documents/Josh/Uni/Sem%206/OOP/crosstheroad/, ...) took 8812.1966ms
[debug] Load.apply: load took 8814.5006ms
[debug] Load.apply: resolveProjects took 0.1198ms
[debug] Load.apply: finalTransforms took 111.5931ms
[debug] Load.apply: config.delegates took 0.4555ms
[debug] Load.apply: Def.make(settings)... took 184.4544ms
[debug] Load.apply: structureIndex took 32.7351ms
[debug] Load.apply: mkStreams took 0.0043ms
[info] set current project to crosstheroad (in build file:/C:/Users/joshi/Documents/Josh/Uni/Sem%206/OOP/crosstheroad/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 49679 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 49679, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to crosstheroad (in build file:/C:/Users/joshi/Documents/Josh/Uni/Sem%206/OOP/crosstheroad/)
[debug] > Exec(idea-shell, None, None)
